<?php
define('PROJECT_TIMESHEET_URI', 'project-timesheet');
define('PROJECT_TIMESHEET_URI_ARGUMENT_POSITION', 0);
define('PROJECT_TIMESHEET_ADMIN_URI', 'admin/content/project-timesheet');
define('PROJECT_TIMESHEET_ADMIN_URI_ARGUMENT_POSITION', 2);
define('PROJECT_TIMESHEET_TYPE_ADMIN_URI', 'admin/structure/project-timesheet-types');
define('PROJECT_TIMESHEET_TYPE_ADMIN_URI_ARGUMENT_POSITION', 2);

module_load_include('inc', 'project_timesheet', 'project_timesheet.pages');

/**
 * Implements hook_entity_info().
 */
function project_timesheet_entity_info() {
  $return = array(
    'project_timesheet' => array(
      'label' => t('Project Timesheet'),
      'entity class' => 'ProjectTimesheet',
      'controller class' => 'ProjectTimesheetController',
      'base table' => 'project_timesheet',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'tid',
        'bundle' => 'type',
        'label' => 'title',
        'language' => 'language',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(),
      'load hook' => 'project_timesheet_load',
      'view modes' => array(
        'full' => array(
          'label' => t('Default'),
          'custom settings' => FALSE,
        ),
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'module' => 'project_timesheet',
      'access callback' => 'project_timesheet_access',
    ),
  );
  $return['project_timesheet_type'] = array(
    'label' => t('Project Timesheet Type'),
    'entity class' => 'ProjectTimesheetType',
    'controller class' => 'ProjectTimesheetTypeController',
    'base table' => 'project_timesheet_type',
    'fieldable' => FALSE,
    'bundle of' => 'project_timesheet',
    'exportable' => FALSE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'module' => 'project_timesheet',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => PROJECT_TIMESHEET_TYPE_ADMIN_URI,
      'file' => 'project_timesheet.type.inc',
      'controller class' => 'ProjectTimesheetTypeUIController',
    ),
    'access callback' => 'project_timesheet_type_access',
  );
  return $return;
}

/**
 * Implements hook_entity_info_alter().
 */
function project_timesheet_entity_info_alter(&$entity_info) {
  foreach (project_timesheet_types() as $type => $info) {
    $entity_info['project_timesheet']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => PROJECT_TIMESHEET_TYPE_ADMIN_URI . '/manage/%project_timesheet_type',
        'real path' => PROJECT_TIMESHEET_TYPE_ADMIN_URI . '/manage/' . $type,
        'bundle argument' => PROJECT_TIMESHEET_TYPE_ADMIN_URI_ARGUMENT_POSITION + 2,
      ),
    );
  }
}

/**
 * Implements hook_menu().
 */
function project_timesheet_menu() {
  $items = array();

  $items[PROJECT_TIMESHEET_TYPE_ADMIN_URI . '/%project_timesheet_type/delete'] = array(
    'title' => t('Delete Project Timesheet Type'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('project_timesheet_type_form_delete_confirm', PROJECT_TIMESHEET_TYPE_ADMIN_URI_ARGUMENT_POSITION + 2),
    'access arguments' => array('administer project_timesheet types'),
    'weight' => 1,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'project_timesheet.type.inc',
  );

  $items[PROJECT_TIMESHEET_ADMIN_URI . '/add'] = array(
    'title' => t('Add Project Timesheet'),
    'page callback' => 'project_timesheet_admin_add_page',
    'access arguments' => array('administer project_timesheet entities'),
    'type' => MENU_LOCAL_ACTION,
    'tab_parent' => 'project_timesheet',
    'tab_root' => 'project_timesheet',
    'file' => 'project_timesheet.admin.inc',
  );

  foreach (project_timesheet_types() as $type => $info) {
    $items[PROJECT_TIMESHEET_ADMIN_URI . '/add/' . $type] = array(
      'title' => $info->label,
      'page callback' => 'project_timesheet_admin_add',
      'page arguments' => array(PROJECT_TIMESHEET_ADMIN_URI_ARGUMENT_POSITION + 2),
      'access callback' => 'entity_access',
      'access arguments' => array('create', 'project_timesheet', $type),
      'file' => 'project_timesheet.admin.inc',
    );
  }

  $project_timesheet_uri = PROJECT_TIMESHEET_URI . '/%project_timesheet';
  $project_timesheet_uri_argument_position = PROJECT_TIMESHEET_URI_ARGUMENT_POSITION + 1;

  $items[$project_timesheet_uri] = array(
    'title callback' => 'entity_label',
    'title arguments' => array('project_timesheet', $project_timesheet_uri_argument_position),
    'page callback' => 'project_timesheet_view',
    'page arguments' => array($project_timesheet_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('view', 'project_timesheet', $project_timesheet_uri_argument_position),
  );

  $items[$project_timesheet_uri . '/view'] = array(
    'title' => t('View Project Timesheet'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items[$project_timesheet_uri . '/delete'] = array(
    'title' => t('Delete Project Timesheet'),
    'title callback' => 'project_timesheet_label',
    'title arguments' => array($project_timesheet_uri_argument_position),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('project_timesheet_admin_delete_form', $project_timesheet_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'project_timesheet', $project_timesheet_uri_argument_position),
    'file' => 'project_timesheet.admin.inc',
  );

  $items[$project_timesheet_uri . '/edit'] = array(
    'title' => t('Edit Project Timesheet'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('project_timesheet_admin_add_form', $project_timesheet_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'project_timesheet', $project_timesheet_uri_argument_position),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'project_timesheet.admin.inc',
  );

  return $items;
}

/**
 * Access callback for Project Timesheet.
 */
function project_timesheet_access($op, $project_timesheet, $account = NULL, $entity_type = NULL) {
  global $user;
  if (!isset($account)) {
    $account = $user;
  }
  switch ($op) {
  	case 'create':
  	  return user_access('administer project_timesheet entities', $account)
  	  || user_access('create project_timesheet entities', $account);
  	case 'view':
  	  return user_access('administer project_timesheet entities', $account)
  	  || user_access('view project_timesheet entities', $account);
  	case 'edit':
  	  return user_access('administer project_timesheet entities')
  	  || user_access('edit any project_timesheet entities')
  	  || (user_access('edit own project_timesheet entities') && ($task->uid == $account->uid));
  }
}

/**
 * Access callback for Project Timesheet Type.
 */
function project_timesheet_type_access($op, $entity = NULL) {
  return user_access('administer project_timesheet types');
}

/**
 * Implements hook_permission().
 */
function project_timesheet_permission() {
  $permissions = array(
    'administer project_timesheet types' => array(
      'title' => t('Administer Project Timesheet types'),
      'description' => t('Allows users to configure Project Timesheet types and their fields.'),
      'restrict access' => TRUE,
    ),
    'create project_timesheet entities' => array(
      'title' => t('Create Project Timesheet'),
      'description' => t('Allows users to create Project Timesheet.'),
      'restrict access' => TRUE,
    ),
    'view project_timesheet entities' => array(
      'title' => t('View Project Timesheet'),
      'description' => t('Allows users to view Project Timesheet.'),
      'restrict access' => TRUE,
    ),
    'edit any project_timesheet entities' => array(
      'title' => t('Edit any Project Timesheet'),
      'description' => t('Allows users to edit any Project Timesheet.'),
      'restrict access' => TRUE,
    ),
    'edit own project_timesheet entities' => array(
      'title' => t('Edit own Project Timesheet'),
      'description' => t('Allows users to edit own Project Timesheet.'),
      'restrict access' => TRUE,
    ),
  );
  return $permissions;
}

/**
 * Implements hook_views_api().
 */
function project_timesheet_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'project_timesheet'),
  );
}

function project_timesheet_get_all_project_name(){
  $options = array('' => t('All'));

  $results = db_select('project', 'p')
  ->fields('p', array('pid','name'))
  ->condition('p.type', 'project', '=')
  ->orderBy('p.name')
  ->execute();

  foreach ($results as $result) {
    $options[$result->pid] = $result->name;
  }
  return $options;
}

function project_timesheet_get_all_project_id(){
  $results = db_select('project', 'p')
  ->fields('p', array('pid'))
  ->condition('p.type', 'project', '=')
  ->execute();

  foreach ($results as $result) {
    $options[$result->pid] = $result->pid;
  }
  return $options;
}

function project_timesheet_change_filter_all_timesheet_status(){
  $timesheet_status = array();

  $results = db_select('project_timesheet', 'p')
  ->fields('p', array('timesheet_status'))
  ->condition('p.type', 'project_timesheet', '=')
  ->orderBy('p.timesheet_status','ASC')
  ->execute();
  foreach ($results as $result) {
    if ($result->timesheet_status == 1){
      $timesheet_status[$result->timesheet_status] = 'Latest';
    }
    if($result->timesheet_status == 2){
      $timesheet_status[$result->timesheet_status] = 'Last Filled';
    }
    if($result->timesheet_status == 3){
      $timesheet_status[$result->timesheet_status] = 'Late Ones';
    }
  }
  return $timesheet_status;
}

function project_timesheet_get_week_first_day_from_week_id($week_id){
  return db_select('week', 'w')
  ->fields('w', array('week_first_day'))
  ->condition('w.week_number', $week_id, '=')
  ->execute()
  ->fetchField();
}
function project_timesheet_get_firstname_from_pm_id($pm_id){
  return db_select('people', 'p')
  ->fields('p', array('first_name'))
  ->condition('p.pid', $pm_id, '=')
  ->execute()
  ->fetchField();
}
function project_timesheet_get_lastname_from_pm_id($pm_id){
  return db_select('people', 'p')
  ->fields('p', array('last_name'))
  ->condition('p.pid', $pm_id, '=')
  ->execute()
  ->fetchField();
}
function project_timesheet_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-project-timesheet-page') {
    $status_project = array('' => t('All'),1 => t('Started'), 2 => t('Closed'));

    $form['project_status']['#type'] = 'select';
    $form['project_status']['#size'] = '1';
    $form['project_status']['#options'] = $status_project;

    $options = array();
    $options = project_timesheet_get_all_project_name();

    $form['project_name']['#type'] = 'select';
    $form['project_name']['#size'] = '1';
    $form['project_name']['#options'] = $options;

    $timesheet_status = array();
    $timesheet_status = project_timesheet_change_filter_all_timesheet_status();


    $form['timesheet_status']['#type'] = 'select';
    $form['timesheet_status']['#size'] = '1';
    $form['timesheet_status']['#options'] = $timesheet_status;
  }
}

function project_timesheet_views_query_alter(&$view, &$query){
  if($view->name == 'project_timesheet'){
    if(count($query->where[1]['conditions'])){
      $params = drupal_get_query_parameters($_GET, array('q'));
      $group = reset(array_keys($query->where));
      unset($query->where[1]['conditions'][1]);
      unset($query->where[1]['conditions'][2]);
      unset($query->where[1]['conditions'][3]);
      if(isset($params['project_status'])){
        if ($params['project_status'] == 1){
          $query->where[$group]['type'] = 'AND';
          $query->add_where_expression($group, 'project_timesheet.project_status',array('1','2'));
          foreach ($query->where[1]['conditions'] as $key => $value){
            if($query->where[1]['conditions'][$key]['operator'] == 'formula'){
              $query->where[1]['conditions'][$key]['operator'] = 'in';
            }
          }
        }
        if($params['project_status'] == 2){
          $query->where[$group]['type'] = 'AND';
          $query->add_where_expression($group, 'project_timesheet.project_status',array('3'));
          foreach ($query->where[1]['conditions'] as $key => $value){
            if($query->where[1]['conditions'][$key]['operator'] == 'formula'){
              $query->where[1]['conditions'][$key]['operator'] = 'in';
            }
          }
        }
      }

      if(isset($params['project_name'])){
        $options = array();
        $options = project_timesheet_get_all_project_id();
        $query->where[$group]['type'] = 'AND';
        foreach ($options as $key_id) {
          if($params['project_name'] == $key_id){
            $query->add_where_expression($group, 'project_timesheet.project',array($key_id));
          }
        }
        foreach ($query->where[1]['conditions'] as $key => $value){
          if($query->where[1]['conditions'][$key]['operator'] == 'formula'){
            $query->where[1]['conditions'][$key]['operator'] = 'in';
          }
        }
      }
  	  if(isset($params['timesheet_status'])){
    	  if ($params['timesheet_status'] == 1){
    	    $query->where[$group]['type'] = 'AND';
    	    $query->add_where_expression($group, 'project_timesheet.timesheet_status',array('1','2','3'));
    	    foreach ($query->where[1]['conditions'] as $key => $value){
    	      if($query->where[1]['conditions'][$key]['operator'] == 'formula'){
    	        $query->where[1]['conditions'][$key]['operator'] = 'in';
    	      }
    	    }
    	  }
    	  if($params['timesheet_status'] == 2){
    	    $query->where[$group]['type'] = 'AND';
    	    $query->add_where_expression($group, 'project_timesheet.timesheet_status',array('2','3'));
    	    foreach ($query->where[1]['conditions'] as $key => $value){
    	      if($query->where[1]['conditions'][$key]['operator'] == 'formula'){
    	        $query->where[1]['conditions'][$key]['operator'] = 'in';
    	      }
    	    }
    	  }
    	  if($params['timesheet_status'] == 3){
    	    $query->where[$group]['type'] = 'AND';
    	    $query->add_where_expression($group, 'project_timesheet.timesheet_status',array('1'));
    	    foreach ($query->where[1]['conditions'] as $key => $value){
    	      if($query->where[1]['conditions'][$key]['operator'] == 'formula'){
    	        $query->where[1]['conditions'][$key]['operator'] = 'in';
    	      }
    	    }
    	  }
  	  }


    }
  }
}
function project_timesheet_views_data_alter(&$data) {
  $data['project_timesheet']['new_contract_mandays'] = array(
      'title' => t('New_contract_mandays'),
      'field' => array(
          'handler' => 'views_handler_field_boolean',
          'help' => t('Project timesheet "new_contract_mandays" property.'),
          'click sortable' => TRUE,
      ),
      'filter' => array(
          'handler' => 'views_handler_filter_boolean_operator',
          'label' => t('New_contract_mandays'),
          'help' => t('Project timesheet "new_contract_mandays" property.'),
          'type' => 'yes-no',
      ),
  );
  $data['project_timesheet']['week'] = array(
      'title' => t('Week'),
      'field' => array(
          'handler' => 'views_handler_field_date',
          'help' => t('Week'),
          'click sortable' => TRUE,
      ),
      'filter' => array(
          'handler' => 'views_handler_filter_date',
          'label' => t('Week'),
          'help' => t('Week.'),
      ),
  );
  $data['project_timesheet']['pm_on_creation'] = array(
      'title' => t('pm_on_creation'),
      'field' => array(
          'handler' => 'views_handler_field',
          'click sortable' => TRUE,
      ),
      'filter' => array(
          'handler' => 'views_handler_filter_string',
          'label' => t('pm_on_creation'),
      ),
  );
  $data['project_timesheet']['project'] = array(
      'title' => t('project'),
      'field' => array(
          'handler' => 'views_handler_field',
          'click sortable' => TRUE,
      ),
      'filter' => array(
          'handler' => 'views_handler_filter_string',
          'label' => t('project'),
      ),
      'sort' => array(
          'handler' => 'views_handler_sort'
      ),
  );
  $data['project_timesheet']['comment'] = array(
      'title' => t('comment'),
      'field' => array(
          'handler' => 'views_handler_field',
          'click sortable' => TRUE,
      ),
      'filter' => array(
          'handler' => 'views_handler_filter_string',
          'label' => t('comment'),
      ),
  );
  $data['project_timesheet']['accounting_status'] = array(
      'title' => t('accounting_status'),
      'field' => array(
          'handler' => 'views_handler_field',
          'click sortable' => TRUE,
      ),
      'filter' => array(
          'handler' => 'views_handler_filter_string',
          'label' => t('accounting_status'),
      ),
      'sort' => array(
          'handler' => 'views_handler_sort'
      ),
  );

}

function project_timesheet_views_post_execute(&$view) {
  if($view->name == 'project_timesheet'){

    foreach ($view->result as $key => $result) {
      if ($view->result[$key]->project_timesheet_timesheet_status == 1){
        $view->result[$key]->project_timesheet_timesheet_status = 'Todo';
      }
      elseif ($view->result[$key]->project_timesheet_timesheet_status == 2){
        $view->result[$key]->project_timesheet_timesheet_status = 'Submitted';
      }
      elseif ($view->result[$key]->project_timesheet_timesheet_status == 3){
        $view->result[$key]->project_timesheet_timesheet_status = 'Approved';
      }

      if ($view->result[$key]->project_timesheet_project_status == 1){
        $view->result[$key]->project_timesheet_project_status = 'In Progress';
      }
      elseif ($view->result[$key]->project_timesheet_project_status == 2){
        $view->result[$key]->project_timesheet_project_status = 'Paused';
      }
      elseif ($view->result[$key]->project_timesheet_project_status == 3){
        $view->result[$key]->project_timesheet_project_status = 'Closed';
      }

      if ($view->result[$key]->project_timesheet_week > 0){
        $view->result[$key]->project_timesheet_week = project_timesheet_get_week_first_day_from_week_id($view->result[$key]->project_timesheet_week);
      }
      else {
        $view->result[$key]->project_timesheet_week = '';
      }

      if ($view->result[$key]->project_timesheet_pm_on_creation > 0){
        $view->result[$key]->project_timesheet_pm_on_creation = project_timesheet_get_firstname_from_pm_id($view->result[$key]->project_timesheet_pm_on_creation).' '.project_timesheet_get_lastname_from_pm_id($view->result[$key]->project_timesheet_pm_on_creation);
      }
      else {
        $view->result[$key]->project_timesheet_pm_on_creation = '';
      }

      $view->result[$key]->project_timesheet_comment = project_timesheet_get_current_budget_from_pid($view->result[$key]->project_timesheet_project);

      $view->result[$key]->project_timesheet_accounting_status = project_timesheet_get_project_name_from_pid($view->result[$key]->project_timesheet_project);

      $view->result[$key]->project_timesheet_project = project_timesheet_get_current_mandays_from_pid($view->result[$key]->project_timesheet_project);


    }
  }
}

function project_timesheet_get_current_mandays_from_pid($project_id){
  return db_select('project', 'pt,')
  ->fields('pt', array('current_mandays'))
  ->condition('pt.pid', $project_id, '=')
  ->execute()
  ->fetchField();
}

function project_timesheet_get_current_budget_from_pid($project_id){
  return db_select('project', 'pt,')
  ->fields('pt', array('current_budget'))
  ->condition('pt.pid', $project_id, '=')
  ->execute()
  ->fetchField();
}

function project_timesheet_get_project_name_from_pid($project_id){
  return db_select('project', 'pt,')
  ->fields('pt', array('name'))
  ->condition('pt.pid', $project_id, '=')
  ->execute()
  ->fetchField();
}
